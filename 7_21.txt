多级缓存架构（本地缓存+外部缓存）

对常用数据进行缓存，高频率
语句，页面，

redis缓存基本知识

本地缓存，存放eg.全局变量，
分布式Redis集群，

最终目的：尽可能减少数据库mysql查询


回填

Memcached

缓存数据的保存方式
1，字符串，优点：节约空间，缺点：不用直接使用（无法通过键获取值，需要转化），序列化时间开销大，更新不方便（一般直接除，再新增）
2，hash，优点：直接使用，不需要序列化转换，可以更新数据，缺点：占用空间较大


有效期：过期时间级差，目的：节省空间，做到数据弱一致性，失效后，可以保证数据一致性

过期策略：
定时过期（对内存友好，对CPU不友好），
惰性过期，（对内存不友好，没访问就不去检查有没有过期）
定期过期

高并发，请求量大

内存淘汰策略：
LRU(以操作过的时间来选择)
LFU(以次数，频率来选择)，存储热点数
定期衰减，


缓存模式：
1）Cache Aside 缓存边缘 
2）Read-through 通读（推荐）
3）Write-through 通写
4）Write-behind caching
Read-through + Cache Aside

更新方式：（写）
1）先更新数据库，再更新缓存。缺点：两个并发写操作导致脏数据。并发、延迟
2）先删缓存，再更新数据库，
3）先更新数据库，再删除缓存（推荐）
关键词：读、写、并发、延迟、脏数据、异步、同步、

方案总结：
读操作之后再设置缓存
写操作之后删除缓存

缓存出现的问题：
1）缓存穿透（频繁查询数据库中不存在的数据），a:回填空值，b:设置查询范围（布隆过滤器）
2）缓存雪崩（缓存数据大面积过期），a:设置过期时间不一致，b:采用多级缓存，缓存级别过期时间级差  c:利用加锁或者队列方式避免过多请求，对服务器进行读写操作（串行）


Redis数据库设计：


问题一：多个用户的数据保存至redis的一条还是多条数据中？
	hash{user_1: ,
	     user_2:,  }
	
	XXX  list[user_1_data,user_2_data,]
	
	XXX  set{user_1_data,user_2_data}
	
	list ,set 参数对应关系比较难找
	
	zset{
		value       score
		user_1_data 1
		user_2_data 2
	}
	
	hash:缺点，捆绑，同生共死

	一个对象数据保存在一个redis键值对上，方便设置有效期
	string:(适合大用户量场景），hash适合小用户量场景
	user:{user_id}:user_basic
	键：user:{user_id} 值：'{"name":xxx,"mobile":xx}'

问题2：如何表示用户1关注了用户2、用户3、用户4?保存user_id还是user_data
	list
	hash
    zset:        
	保存user_id较优，保存user_data浪费资源。通过user_id 再查询对应资料



持久存储设计：RDB,OAF
    致命性数据（User表），非致命性数据
    冗余字段存在mysql与redis持久化存储


问题3：如何存储统计数据？发布数量，关注数量，粉丝数据，点赞量

    zset




